package de.mq.archive.web.edit;



import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.wicket.Component;
import org.apache.wicket.IGenericComponent;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.Button;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.form.Form;
import org.apache.wicket.markup.html.form.Radio;
import org.apache.wicket.markup.html.form.RadioGroup;
import org.apache.wicket.markup.html.form.RequiredTextField;
import org.apache.wicket.markup.html.form.TextArea;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.markup.html.form.upload.FileUploadField;
import org.apache.wicket.markup.html.list.ListItem;
import org.apache.wicket.markup.html.list.ListView;
import org.apache.wicket.markup.html.panel.FeedbackPanel;
import org.apache.wicket.model.util.ListModel;

import org.apache.wicket.request.mapper.parameter.PageParameters;
import org.apache.wicket.validation.validator.PatternValidator;

import de.mq.archive.domain.Category;
import de.mq.archive.domain.GridFsInfo;
import de.mq.archive.web.ActionButton;
import de.mq.archive.web.ActionListener;

import de.mq.archive.web.ComponentFactory;
import de.mq.archive.web.TwoWayMapping;
import de.mq.archive.web.search.ArchiveModelParts;
import de.mq.archive.web.search.SearchPage;

public class EditPage extends WebPage {
	
	
	private static final String UPLOAD_FORM = "uploadForm";

	static final String FORM_NAME = "editForm";

	private static final long serialVersionUID = 1L;
	
	@Inject
	private EditPageModelWeb editPageModelWeb;
	
	@Inject()
	private ComponentFactory componentFactory;
	
	@Inject()
	@Named("editActionListener")
	private ActionListener<String> actionListener;
	

	@Inject()
	@Named("fileUpload")
	private IGenericComponent<?>  fileUploadField; 

	private Map<ArchiveModelParts, Class<? extends Component>> autoGeneratedFields = new HashMap<>();
	
	

	public EditPage(final PageParameters parameters) {
	
		autoGeneratedFields.put(ArchiveModelParts.Text, TextArea.class);
		autoGeneratedFields.put(ArchiveModelParts.DocumentDate, DateTextField.class);
		autoGeneratedFields.put(ArchiveModelParts.Name, RequiredTextField.class);
		autoGeneratedFields.put(ArchiveModelParts.ArchiveId, TextField.class);
		
	
		final Form<String> editForm = new Form<String>(FORM_NAME) {

			private static final long serialVersionUID = 1L;


			@Override
			protected void onError() {
				Arrays.stream(I18NEditPageMessagesParts.values()).forEach(part -> {
					((Component) get(part.wicketId())).setVisible(((FeedbackPanel) get(part.wicketIdFeedback())).anyMessage());
				});
				
			}
		
		};
		
		
		Arrays.stream(I18NEditPageMessagesParts.values()).forEach(part -> addMessage(part, editForm) );
		
		add(editForm);
		
		Arrays.stream(I18NEditPageModelParts.values()).filter(value -> ! value.isWithInForm()).forEach(value -> add(componentFactory.newComponent(editPageModelWeb.getI18NLabels(), value, Label.class)));
		
		
		Arrays.stream(I18NEditPageModelParts.values()).filter(value ->  value.isWithInForm() && ! value.isButton()).forEach(value -> editForm.add(componentFactory.newComponent(editPageModelWeb.getI18NLabels(), value, Label.class)));
		Arrays.stream(I18NEditPageModelParts.values()).filter(value ->  value.isButton()).forEach(value -> editForm.add(componentFactory.newComponent(editPageModelWeb.getI18NLabels(), value, ActionButton.class)));
		
		button(editForm, I18NEditPageModelParts.SaveButton).addActionListener(EditPageController.SAVE_ACTION , (ActionListener<String>) actionListener);
		autoGeneratedFields.entrySet().stream().forEach(entry ->  editForm.add(componentFactory.newComponent(editPageModelWeb.getArchiveModelWeb(), entry.getKey(),entry.getValue())) );
		
		final DropDownChoice<?> categoryBox = (DropDownChoice<?>) componentFactory.newComponent(editPageModelWeb.getArchiveModelWeb(), ArchiveModelParts.Category,  DropDownChoice.class, new ListModel<>(Arrays.asList(Category.values()) ));
		editForm.add(categoryBox);
		categoryBox.setNullValid(true);
		
		Arrays.stream(I18NEditPageModelParts.values()).filter(value -> value.isButton()).forEach(value -> ((ActionButton<?>)editForm.get(value.wicketId())).addActionListener(id -> setResponsePage(SearchPage.class)));
		
		button(editForm, I18NEditPageModelParts.CancelButton).setDefaultFormProcessing(false);
		
		
		editPageModelWeb.getI18NLabels().intoWeb(getLocale());
		editPageModelWeb.getI18NMessages().intoWeb(getLocale());
		editPageModelWeb.getI18NAttachementLabels().intoWeb(getLocale());
		
		input(editForm, ArchiveModelParts.Name).add(new PatternValidator("[ 0-9a-zA-Z_-]{1,25}"));
		input(editForm, ArchiveModelParts.ArchiveId).add(new PatternValidator("[0-9a-zA-Z_-]{0,25}"));
	
		final Form<String> attachementForm = new Form<String>("attachementForm");
		attachementForm.setVisible(editPageModelWeb.hasAttachements());
		
		@SuppressWarnings("unchecked")
		final RadioGroup<String> group = componentFactory.newComponent("group", editPageModelWeb.getSelectedAttachementWeb(), RadioGroup.class);
		
		
		final ListView<TwoWayMapping<GridFsInfo<String>, Enum<?>>> attachements = new ListView<TwoWayMapping<GridFsInfo<String>, Enum<?>>>("attachements", editPageModelWeb.getAttachements()) {

			private static final long serialVersionUID = 1L;

			@Override
			protected void populateItem(ListItem<TwoWayMapping<GridFsInfo<String>, Enum<?>>> item) {
				item.add(componentFactory.newComponent( item.getModelObject(),GridFsInfoParts.Id, Radio.class));
				item.add(componentFactory.newComponent( item.getModelObject(),GridFsInfoParts.Filename, Label.class));
				item.add(componentFactory.newComponent( item.getModelObject(),GridFsInfoParts.ContentType, Label.class));
				item.add(componentFactory.newComponent( item.getModelObject(),GridFsInfoParts.ContentLength, Label.class));
			}
			
		};

		
		
		Arrays.stream(I18NAttachementsModelParts.values()).filter(part -> part.targetClass()==Label.class).forEach(part -> group.add(componentFactory.newComponent(editPageModelWeb.getI18NAttachementLabels(), part, part.targetClass())) );
		
		@SuppressWarnings("unchecked")
		final ActionButton<String> deleteButton = (ActionButton<String>) componentFactory.newComponent(editPageModelWeb.getI18NAttachementLabels(), I18NAttachementsModelParts.DeleteButton,ActionButton.class);
		deleteButton.addActionListener(EditPageModel.DELETE_UPLOAD_ACTION, actionListener);
		deleteButton.addActionListener( action ->  setResponsePage(EditPage.class));
		
		@SuppressWarnings("unchecked")
		final ActionButton<String> showButton = (ActionButton<String>) componentFactory.newComponent(editPageModelWeb.getI18NAttachementLabels(), I18NAttachementsModelParts.ShowButton,ActionButton.class);
		showButton.addActionListener(EditPageModel.SHOW_ATTACHEMENT_ACTION, actionListener);
		
		group.add(new AjaxFormChoiceComponentUpdatingBehavior() {

			private static final long serialVersionUID = 1L;

			@Override
			protected void onUpdate(final AjaxRequestTarget target) {
			enableButtons(editPageModelWeb.isAttachementSelected(), deleteButton, showButton);
				target.add(deleteButton);
				target.add(showButton);


			}

		});
		
		group.add(attachements);
		group.add(deleteButton);
		group.add(showButton);
		add(attachementForm);
		attachementForm.add(group);	
		final Form<String>  uploadForm = new Form<>(UPLOAD_FORM);		
		@SuppressWarnings("unchecked")
		final ActionButton<String> uploadButton = componentFactory.newComponent(editPageModelWeb.getI18NAttachementLabels(), I18NAttachementsModelParts.UploadButton, ActionButton.class);
		
		uploadButton.addActionListener(EditPageModel.UPLOAD_ACTION, actionListener);
		uploadButton.addActionListener( a -> setResponsePage(EditPage.class));
		uploadForm.add(uploadButton);
	

		uploadForm.setVisible(editPageModelWeb.isPersistent());
		uploadForm.add(componentFactory.deProxymize(fileUploadField, FileUploadField.class));
		enableButtons(editPageModelWeb.isAttachementSelected(), deleteButton, showButton);
		add(uploadForm);
	
	}

	@SuppressWarnings("unchecked")
	private TextField<String> input(final Form<String> editForm, final ArchiveModelParts part) {
			return (TextField<String>) editForm.get(part.wicketId());
	}


	@SuppressWarnings("unchecked")
	private ActionButton<String> button(final Form<String> editForm, final I18NEditPageModelParts parts) {
		return (ActionButton<String>)editForm.get(parts.wicketId());
	}


	private void addMessage(final I18NEditPageMessagesParts part, final Form<?> form ){
		
		final Label messageLabel = componentFactory.newComponent(editPageModelWeb.getI18NMessages(), part, Label.class);
		messageLabel.setVisible(false);
		form.add(messageLabel);
		
		final FeedbackPanel panel = new FeedbackPanel(part.wicketIdFeedback(), message -> message.getReporter().equals(form.get(part.wicketIdInput())));
		
		
	   panel.setVisible(false);
		form.add(panel);
	}
	

	private void enableButtons(final boolean enabled, Button ... buttons) {
		Arrays.asList(buttons).forEach(button -> button.setEnabled(enabled));
	}
	
	

}
